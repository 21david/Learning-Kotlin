// Video 83

package udemy.kotlincourse.kotlincode

import java.io.IOException

fun main(args: Array<String>) {
    Paper.Companion.paperComp()
    Paper.paperComp()
}

class Paper {
    companion object {
        val isSquare = false

        // @JvmField lets us avoid having to access Companion first
        // and also lets us access this directly instead of through setter/getter methods
        // from within our Java code
        @JvmField val isSquare2 = false

        // constants don't need the @JvmField annotation
        const val contant = 25

        fun paperComp() = println("I'm in Paper's companion object")

        // @JvmStatic lets us use the static version of this method from our Java code
        // (2 versions of this method are generated by Kotlin)
        @JvmStatic fun paperComp2() = println("Now we just need to say Paper.paperComp2() from our Java code")


        fun printMe(text: String) {
            println("I don't expect a null value: $text")
        }


        // Exceptions
        fun doIO() {
            throw IOException()
        }

        @Throws(IOException::class)
        fun doIOAnnotated() {
            throw IOException()
        }


        // Default arguments
        // in Java, we would HAVE to provide the optional parameter for a function like this
        fun defaultArguments(str: String, num: Int = 25) {
            println("$str $num")
        }

        // for functions with default values on at least 1 argument, this annotation
        // tells the JVM to make all the possible versions of this function
        // (for example, a version without the second parameter in this function)
        @JvmOverloads
        fun defaultArgumentsAnnotated(str: String, num: Int = 25) {
            println("$str $num")}
    }
}

// there will only every be 1 instance of this object created
object SingletonObj {
    fun doSomething() = println("I'm doing something in the singleton object")

    @JvmStatic fun doSomething2() = println("Now we just need to say SingletonObj.doSomething2() from our Java code")
}